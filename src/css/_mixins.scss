// edit font rendering -> tip: use for light text on dark backgrounds
@mixin fontSmooth {
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

// crop top space on text elements - caused by line height
@mixin lhCrop($line-height, $capital-letter: 1) {
	&::before {
		content: "";
		display: block;
		height: 0;
		width: 0;
		margin-top: calc((#{$capital-letter} - #{$line-height}) * 0.5em);
	}
}

// CSS triangle
@mixin triangle($direction: up, $width: 12px, $color: red) {
	width: 0;
	height: 0;
	border: $width solid transparent;

	@if ($direction == left) {
		border-right-color: $color;
	} @else if($direction == right) {
		border-left-color: $color;
	} @else if($direction == down) {
		border-top-color: $color;
	} @else {
		border-bottom-color: $color;
	}
}

// reset user agent style
@mixin reset {
	background-color: transparent;
	padding: 0;
	border: 0;
	border-radius: 0;
	color: inherit;
	line-height: inherit;
	appearance: none;
}

/**
 * Colors
 */
@mixin defineColorHSL($color, $hue, $saturation, $lightness) {
	#{$color}: unquote("hsl(#{$hue}, #{$saturation}, #{$lightness})");
	#{$color}-h: #{$hue};
	#{$color}-s: #{$saturation};
	#{$color}-l: #{$lightness};
}

@function alpha($color, $opacity) {
	$color: str-replace($color, "var(");
	$color: str-replace($color, ")");
	$color-h: var(#{$color + "-h"});
	$color-s: var(#{$color + "-s"});
	$color-l: var(#{$color + "-l"});
	@return hsla($color-h, $color-s, $color-l, $opacity);
}

@function lightness($color, $lightnessMultiplier) {
	$color: str-replace($color, "var(");
	$color: str-replace($color, ")");
	$color-h: var(#{$color + "-h"});
	$color-s: var(#{$color + "-s"});
	$color-l: var(#{$color + "-l"});
	@return hsl(
		$color-h,
		$color-s,
		calc(#{$color-l} * #{$lightnessMultiplier})
	);
}

@function str-replace($string, $search, $replace: "") {
	$index: str-index($string, $search);
	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace +
			str-replace(
				str-slice($string, $index + str-length($search)),
				$search,
				$replace
			);
	}
	@return $string;
}

/**
 * Edit Units
 */
@mixin spaceUnit($space-unit) {
	--space-unit: #{$space-unit};
	--space-xxxxs: calc(0.125 * #{$space-unit});
	--space-xxxs: calc(0.25 * #{$space-unit});
	--space-xxs: calc(0.375 * #{$space-unit});
	--space-xs: calc(0.5 * #{$space-unit});
	--space-sm: calc(0.75 * #{$space-unit});
	--space-md: calc(1.25 * #{$space-unit});
	--space-lg: calc(2 * #{$space-unit});
	--space-xl: calc(3.25 * #{$space-unit});
	--space-xxl: calc(5.25 * #{$space-unit});
	--space-xxxl: calc(8.5 * #{$space-unit});
	--space-xxxxl: calc(13.75 * #{$space-unit});
	--component-padding: var(--space-md);
}

/**
 * Scrollbars
 */
@mixin scrollbars(
	$size,
	$mt-radius,
	$foreground-color,
	$background-color: mix($foreground-color, white, 30%)
) {
	::-webkit-scrollbar {
		width: $size;
		height: $size;
		@include border-radius($mt-radius);
	}

	::-webkit-scrollbar-thumb {
		background: $foreground-color;
		@include border-radius($mt-radius);
	}

	::-webkit-scrollbar-track {
		background: $background-color;
		@include border-radius($mt-radius);
	}
}

/**
 * Align Center
 */
@mixin center($axis: "both") {
	position: absolute;
	@if $axis== "y" {
		top: 50%;
		@include transform(translateY(-50%));
	}
	@if $axis== "x" {
		left: 50%;
		@include transform(translateX(-50%));
	}
	@if $axis== "both" {
		top: 50%;
		left: 50%;
		@include transform(translate(-50%, -50%));
	}
}

/**
 * Pseudo
 */
@mixin pseudo($display: block, $pos: absolute, $content: "") {
	content: $content;
	display: $display;
	position: $pos;
}
